/*
 * File: solutions/euler002.hpp
 *
 *  Copyright (c) 2015, Denis Novikov
 *
 *  Created on: Mar 13, 2015
 *      Author: Denis Novikov
 *     Licence: GNU v.3.0
 * Description: see https://projecteuler.net/problem=2 for details.
 *
 * Problem (#002):
 * Each new term in the Fibonacci sequence is generated by adding
 * the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not
 * exceed four million, find the sum of the even-valued terms.
 * 
 */

#pragma once

namespace euler002 { 

namespace impl {

static constexpr inline auto sum_ef(uint64_t sum, uint64_t curr, uint64_t prev) -> uint64_t {
	return curr >= 4000000ul ? sum :
		sum_ef(sum + ((curr & 0x01) == 0 ? curr : 0ul), prev + curr, curr);
}

}  // namespace impl

static constexpr inline auto solution() -> uint64_t {
	return impl::sum_ef({}, {1}, {});
}

}  // namespace euler002
